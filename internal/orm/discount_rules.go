// Code generated by SQLBoiler 4.3.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DiscountRule is an object representing the database table.
type DiscountRule struct {
	ID                int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DiscountID        int64     `boil:"discount_id" json:"discount_id" toml:"discount_id" yaml:"discount_id"`
	ProductID         int64     `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	ProductQuantity   int64     `boil:"product_quantity" json:"product_quantity" toml:"product_quantity" yaml:"product_quantity"`
	ProductQuantityFN string    `boil:"product_quantity_fn" json:"product_quantity_fn" toml:"product_quantity_fn" yaml:"product_quantity_fn"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *discountRuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L discountRuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DiscountRuleColumns = struct {
	ID                string
	DiscountID        string
	ProductID         string
	ProductQuantity   string
	ProductQuantityFN string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "id",
	DiscountID:        "discount_id",
	ProductID:         "product_id",
	ProductQuantity:   "product_quantity",
	ProductQuantityFN: "product_quantity_fn",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

// Generated where

var DiscountRuleWhere = struct {
	ID                whereHelperint64
	DiscountID        whereHelperint64
	ProductID         whereHelperint64
	ProductQuantity   whereHelperint64
	ProductQuantityFN whereHelperstring
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	ID:                whereHelperint64{field: "\"discount_rules\".\"id\""},
	DiscountID:        whereHelperint64{field: "\"discount_rules\".\"discount_id\""},
	ProductID:         whereHelperint64{field: "\"discount_rules\".\"product_id\""},
	ProductQuantity:   whereHelperint64{field: "\"discount_rules\".\"product_quantity\""},
	ProductQuantityFN: whereHelperstring{field: "\"discount_rules\".\"product_quantity_fn\""},
	CreatedAt:         whereHelpertime_Time{field: "\"discount_rules\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"discount_rules\".\"updated_at\""},
}

// DiscountRuleRels is where relationship names are stored.
var DiscountRuleRels = struct {
	Discount string
	Product  string
}{
	Discount: "Discount",
	Product:  "Product",
}

// discountRuleR is where relationships are stored.
type discountRuleR struct {
	Discount *Discount `boil:"Discount" json:"Discount" toml:"Discount" yaml:"Discount"`
	Product  *Product  `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*discountRuleR) NewStruct() *discountRuleR {
	return &discountRuleR{}
}

// discountRuleL is where Load methods for each relationship are stored.
type discountRuleL struct{}

var (
	discountRuleAllColumns            = []string{"id", "discount_id", "product_id", "product_quantity", "product_quantity_fn", "created_at", "updated_at"}
	discountRuleColumnsWithoutDefault = []string{"discount_id", "product_id", "product_quantity", "product_quantity_fn"}
	discountRuleColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	discountRulePrimaryKeyColumns     = []string{"id"}
)

type (
	// DiscountRuleSlice is an alias for a slice of pointers to DiscountRule.
	// This should generally be used opposed to []DiscountRule.
	DiscountRuleSlice []*DiscountRule
	// DiscountRuleHook is the signature for custom DiscountRule hook methods
	DiscountRuleHook func(context.Context, boil.ContextExecutor, *DiscountRule) error

	discountRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	discountRuleType                 = reflect.TypeOf(&DiscountRule{})
	discountRuleMapping              = queries.MakeStructMapping(discountRuleType)
	discountRulePrimaryKeyMapping, _ = queries.BindMapping(discountRuleType, discountRuleMapping, discountRulePrimaryKeyColumns)
	discountRuleInsertCacheMut       sync.RWMutex
	discountRuleInsertCache          = make(map[string]insertCache)
	discountRuleUpdateCacheMut       sync.RWMutex
	discountRuleUpdateCache          = make(map[string]updateCache)
	discountRuleUpsertCacheMut       sync.RWMutex
	discountRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var discountRuleBeforeInsertHooks []DiscountRuleHook
var discountRuleBeforeUpdateHooks []DiscountRuleHook
var discountRuleBeforeDeleteHooks []DiscountRuleHook
var discountRuleBeforeUpsertHooks []DiscountRuleHook

var discountRuleAfterInsertHooks []DiscountRuleHook
var discountRuleAfterSelectHooks []DiscountRuleHook
var discountRuleAfterUpdateHooks []DiscountRuleHook
var discountRuleAfterDeleteHooks []DiscountRuleHook
var discountRuleAfterUpsertHooks []DiscountRuleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DiscountRule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DiscountRule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DiscountRule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DiscountRule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DiscountRule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DiscountRule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DiscountRule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DiscountRule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DiscountRule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDiscountRuleHook registers your hook function for all future operations.
func AddDiscountRuleHook(hookPoint boil.HookPoint, discountRuleHook DiscountRuleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		discountRuleBeforeInsertHooks = append(discountRuleBeforeInsertHooks, discountRuleHook)
	case boil.BeforeUpdateHook:
		discountRuleBeforeUpdateHooks = append(discountRuleBeforeUpdateHooks, discountRuleHook)
	case boil.BeforeDeleteHook:
		discountRuleBeforeDeleteHooks = append(discountRuleBeforeDeleteHooks, discountRuleHook)
	case boil.BeforeUpsertHook:
		discountRuleBeforeUpsertHooks = append(discountRuleBeforeUpsertHooks, discountRuleHook)
	case boil.AfterInsertHook:
		discountRuleAfterInsertHooks = append(discountRuleAfterInsertHooks, discountRuleHook)
	case boil.AfterSelectHook:
		discountRuleAfterSelectHooks = append(discountRuleAfterSelectHooks, discountRuleHook)
	case boil.AfterUpdateHook:
		discountRuleAfterUpdateHooks = append(discountRuleAfterUpdateHooks, discountRuleHook)
	case boil.AfterDeleteHook:
		discountRuleAfterDeleteHooks = append(discountRuleAfterDeleteHooks, discountRuleHook)
	case boil.AfterUpsertHook:
		discountRuleAfterUpsertHooks = append(discountRuleAfterUpsertHooks, discountRuleHook)
	}
}

// One returns a single discountRule record from the query.
func (q discountRuleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DiscountRule, error) {
	o := &DiscountRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for discount_rules")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DiscountRule records from the query.
func (q discountRuleQuery) All(ctx context.Context, exec boil.ContextExecutor) (DiscountRuleSlice, error) {
	var o []*DiscountRule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to DiscountRule slice")
	}

	if len(discountRuleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DiscountRule records in the query.
func (q discountRuleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count discount_rules rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q discountRuleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if discount_rules exists")
	}

	return count > 0, nil
}

// Discount pointed to by the foreign key.
func (o *DiscountRule) Discount(mods ...qm.QueryMod) discountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DiscountID),
	}

	queryMods = append(queryMods, mods...)

	query := Discounts(queryMods...)
	queries.SetFrom(query.Query, "\"discounts\"")

	return query
}

// Product pointed to by the foreign key.
func (o *DiscountRule) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	return query
}

// LoadDiscount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (discountRuleL) LoadDiscount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiscountRule interface{}, mods queries.Applicator) error {
	var slice []*DiscountRule
	var object *DiscountRule

	if singular {
		object = maybeDiscountRule.(*DiscountRule)
	} else {
		slice = *maybeDiscountRule.(*[]*DiscountRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &discountRuleR{}
		}
		args = append(args, object.DiscountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &discountRuleR{}
			}

			for _, a := range args {
				if a == obj.DiscountID {
					continue Outer
				}
			}

			args = append(args, obj.DiscountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`discounts`),
		qm.WhereIn(`discounts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Discount")
	}

	var resultSlice []*Discount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Discount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for discounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for discounts")
	}

	if len(discountRuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Discount = foreign
		if foreign.R == nil {
			foreign.R = &discountR{}
		}
		foreign.R.DiscountRules = append(foreign.R.DiscountRules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DiscountID == foreign.ID {
				local.R.Discount = foreign
				if foreign.R == nil {
					foreign.R = &discountR{}
				}
				foreign.R.DiscountRules = append(foreign.R.DiscountRules, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (discountRuleL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiscountRule interface{}, mods queries.Applicator) error {
	var slice []*DiscountRule
	var object *DiscountRule

	if singular {
		object = maybeDiscountRule.(*DiscountRule)
	} else {
		slice = *maybeDiscountRule.(*[]*DiscountRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &discountRuleR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &discountRuleR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(discountRuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.DiscountRules = append(foreign.R.DiscountRules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.DiscountRules = append(foreign.R.DiscountRules, local)
				break
			}
		}
	}

	return nil
}

// SetDiscount of the discountRule to the related item.
// Sets o.R.Discount to related.
// Adds o to related.R.DiscountRules.
func (o *DiscountRule) SetDiscount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Discount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"discount_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"discount_id"}),
		strmangle.WhereClause("\"", "\"", 2, discountRulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DiscountID = related.ID
	if o.R == nil {
		o.R = &discountRuleR{
			Discount: related,
		}
	} else {
		o.R.Discount = related
	}

	if related.R == nil {
		related.R = &discountR{
			DiscountRules: DiscountRuleSlice{o},
		}
	} else {
		related.R.DiscountRules = append(related.R.DiscountRules, o)
	}

	return nil
}

// SetProduct of the discountRule to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.DiscountRules.
func (o *DiscountRule) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"discount_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, discountRulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &discountRuleR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			DiscountRules: DiscountRuleSlice{o},
		}
	} else {
		related.R.DiscountRules = append(related.R.DiscountRules, o)
	}

	return nil
}

// DiscountRules retrieves all the records using an executor.
func DiscountRules(mods ...qm.QueryMod) discountRuleQuery {
	mods = append(mods, qm.From("\"discount_rules\""))
	return discountRuleQuery{NewQuery(mods...)}
}

// FindDiscountRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDiscountRule(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*DiscountRule, error) {
	discountRuleObj := &DiscountRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"discount_rules\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, discountRuleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from discount_rules")
	}

	return discountRuleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DiscountRule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no discount_rules provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discountRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	discountRuleInsertCacheMut.RLock()
	cache, cached := discountRuleInsertCache[key]
	discountRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			discountRuleAllColumns,
			discountRuleColumnsWithDefault,
			discountRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(discountRuleType, discountRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(discountRuleType, discountRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"discount_rules\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"discount_rules\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into discount_rules")
	}

	if !cached {
		discountRuleInsertCacheMut.Lock()
		discountRuleInsertCache[key] = cache
		discountRuleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DiscountRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DiscountRule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	discountRuleUpdateCacheMut.RLock()
	cache, cached := discountRuleUpdateCache[key]
	discountRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			discountRuleAllColumns,
			discountRulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update discount_rules, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"discount_rules\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, discountRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(discountRuleType, discountRuleMapping, append(wl, discountRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update discount_rules row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for discount_rules")
	}

	if !cached {
		discountRuleUpdateCacheMut.Lock()
		discountRuleUpdateCache[key] = cache
		discountRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q discountRuleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for discount_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for discount_rules")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DiscountRuleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"discount_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, discountRulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in discountRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all discountRule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DiscountRule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no discount_rules provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discountRuleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	discountRuleUpsertCacheMut.RLock()
	cache, cached := discountRuleUpsertCache[key]
	discountRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			discountRuleAllColumns,
			discountRuleColumnsWithDefault,
			discountRuleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			discountRuleAllColumns,
			discountRulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert discount_rules, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(discountRulePrimaryKeyColumns))
			copy(conflict, discountRulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"discount_rules\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(discountRuleType, discountRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(discountRuleType, discountRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert discount_rules")
	}

	if !cached {
		discountRuleUpsertCacheMut.Lock()
		discountRuleUpsertCache[key] = cache
		discountRuleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DiscountRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DiscountRule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no DiscountRule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), discountRulePrimaryKeyMapping)
	sql := "DELETE FROM \"discount_rules\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from discount_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for discount_rules")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q discountRuleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no discountRuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from discount_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for discount_rules")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DiscountRuleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(discountRuleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"discount_rules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, discountRulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from discountRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for discount_rules")
	}

	if len(discountRuleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DiscountRule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDiscountRule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiscountRuleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DiscountRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"discount_rules\".* FROM \"discount_rules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, discountRulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in DiscountRuleSlice")
	}

	*o = slice

	return nil
}

// DiscountRuleExists checks if the DiscountRule row exists.
func DiscountRuleExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"discount_rules\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if discount_rules exists")
	}

	return exists, nil
}
