// Code generated by SQLBoiler 4.3.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductDiscountRule is an object representing the database table.
type ProductDiscountRule struct {
	ID                int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductDiscountID int64     `boil:"product_discount_id" json:"product_discount_id" toml:"product_discount_id" yaml:"product_discount_id"`
	ProductID         int64     `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	ProductQuantity   int64     `boil:"product_quantity" json:"product_quantity" toml:"product_quantity" yaml:"product_quantity"`
	ProductQuantityFN string    `boil:"product_quantity_fn" json:"product_quantity_fn" toml:"product_quantity_fn" yaml:"product_quantity_fn"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *productDiscountRuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productDiscountRuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductDiscountRuleColumns = struct {
	ID                string
	ProductDiscountID string
	ProductID         string
	ProductQuantity   string
	ProductQuantityFN string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "id",
	ProductDiscountID: "product_discount_id",
	ProductID:         "product_id",
	ProductQuantity:   "product_quantity",
	ProductQuantityFN: "product_quantity_fn",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

// Generated where

var ProductDiscountRuleWhere = struct {
	ID                whereHelperint64
	ProductDiscountID whereHelperint64
	ProductID         whereHelperint64
	ProductQuantity   whereHelperint64
	ProductQuantityFN whereHelperstring
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	ID:                whereHelperint64{field: "\"product_discount_rules\".\"id\""},
	ProductDiscountID: whereHelperint64{field: "\"product_discount_rules\".\"product_discount_id\""},
	ProductID:         whereHelperint64{field: "\"product_discount_rules\".\"product_id\""},
	ProductQuantity:   whereHelperint64{field: "\"product_discount_rules\".\"product_quantity\""},
	ProductQuantityFN: whereHelperstring{field: "\"product_discount_rules\".\"product_quantity_fn\""},
	CreatedAt:         whereHelpertime_Time{field: "\"product_discount_rules\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"product_discount_rules\".\"updated_at\""},
}

// ProductDiscountRuleRels is where relationship names are stored.
var ProductDiscountRuleRels = struct {
	ProductDiscount string
	Product         string
}{
	ProductDiscount: "ProductDiscount",
	Product:         "Product",
}

// productDiscountRuleR is where relationships are stored.
type productDiscountRuleR struct {
	ProductDiscount *ProductDiscount `boil:"ProductDiscount" json:"ProductDiscount" toml:"ProductDiscount" yaml:"ProductDiscount"`
	Product         *Product         `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*productDiscountRuleR) NewStruct() *productDiscountRuleR {
	return &productDiscountRuleR{}
}

// productDiscountRuleL is where Load methods for each relationship are stored.
type productDiscountRuleL struct{}

var (
	productDiscountRuleAllColumns            = []string{"id", "product_discount_id", "product_id", "product_quantity", "product_quantity_fn", "created_at", "updated_at"}
	productDiscountRuleColumnsWithoutDefault = []string{"product_discount_id", "product_id", "product_quantity", "product_quantity_fn"}
	productDiscountRuleColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	productDiscountRulePrimaryKeyColumns     = []string{"id"}
)

type (
	// ProductDiscountRuleSlice is an alias for a slice of pointers to ProductDiscountRule.
	// This should generally be used opposed to []ProductDiscountRule.
	ProductDiscountRuleSlice []*ProductDiscountRule
	// ProductDiscountRuleHook is the signature for custom ProductDiscountRule hook methods
	ProductDiscountRuleHook func(context.Context, boil.ContextExecutor, *ProductDiscountRule) error

	productDiscountRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productDiscountRuleType                 = reflect.TypeOf(&ProductDiscountRule{})
	productDiscountRuleMapping              = queries.MakeStructMapping(productDiscountRuleType)
	productDiscountRulePrimaryKeyMapping, _ = queries.BindMapping(productDiscountRuleType, productDiscountRuleMapping, productDiscountRulePrimaryKeyColumns)
	productDiscountRuleInsertCacheMut       sync.RWMutex
	productDiscountRuleInsertCache          = make(map[string]insertCache)
	productDiscountRuleUpdateCacheMut       sync.RWMutex
	productDiscountRuleUpdateCache          = make(map[string]updateCache)
	productDiscountRuleUpsertCacheMut       sync.RWMutex
	productDiscountRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productDiscountRuleBeforeInsertHooks []ProductDiscountRuleHook
var productDiscountRuleBeforeUpdateHooks []ProductDiscountRuleHook
var productDiscountRuleBeforeDeleteHooks []ProductDiscountRuleHook
var productDiscountRuleBeforeUpsertHooks []ProductDiscountRuleHook

var productDiscountRuleAfterInsertHooks []ProductDiscountRuleHook
var productDiscountRuleAfterSelectHooks []ProductDiscountRuleHook
var productDiscountRuleAfterUpdateHooks []ProductDiscountRuleHook
var productDiscountRuleAfterDeleteHooks []ProductDiscountRuleHook
var productDiscountRuleAfterUpsertHooks []ProductDiscountRuleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductDiscountRule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountRuleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductDiscountRule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountRuleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductDiscountRule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountRuleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductDiscountRule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountRuleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductDiscountRule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountRuleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductDiscountRule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountRuleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductDiscountRule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountRuleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductDiscountRule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountRuleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductDiscountRule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountRuleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductDiscountRuleHook registers your hook function for all future operations.
func AddProductDiscountRuleHook(hookPoint boil.HookPoint, productDiscountRuleHook ProductDiscountRuleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		productDiscountRuleBeforeInsertHooks = append(productDiscountRuleBeforeInsertHooks, productDiscountRuleHook)
	case boil.BeforeUpdateHook:
		productDiscountRuleBeforeUpdateHooks = append(productDiscountRuleBeforeUpdateHooks, productDiscountRuleHook)
	case boil.BeforeDeleteHook:
		productDiscountRuleBeforeDeleteHooks = append(productDiscountRuleBeforeDeleteHooks, productDiscountRuleHook)
	case boil.BeforeUpsertHook:
		productDiscountRuleBeforeUpsertHooks = append(productDiscountRuleBeforeUpsertHooks, productDiscountRuleHook)
	case boil.AfterInsertHook:
		productDiscountRuleAfterInsertHooks = append(productDiscountRuleAfterInsertHooks, productDiscountRuleHook)
	case boil.AfterSelectHook:
		productDiscountRuleAfterSelectHooks = append(productDiscountRuleAfterSelectHooks, productDiscountRuleHook)
	case boil.AfterUpdateHook:
		productDiscountRuleAfterUpdateHooks = append(productDiscountRuleAfterUpdateHooks, productDiscountRuleHook)
	case boil.AfterDeleteHook:
		productDiscountRuleAfterDeleteHooks = append(productDiscountRuleAfterDeleteHooks, productDiscountRuleHook)
	case boil.AfterUpsertHook:
		productDiscountRuleAfterUpsertHooks = append(productDiscountRuleAfterUpsertHooks, productDiscountRuleHook)
	}
}

// One returns a single productDiscountRule record from the query.
func (q productDiscountRuleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductDiscountRule, error) {
	o := &ProductDiscountRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for product_discount_rules")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductDiscountRule records from the query.
func (q productDiscountRuleQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductDiscountRuleSlice, error) {
	var o []*ProductDiscountRule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to ProductDiscountRule slice")
	}

	if len(productDiscountRuleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductDiscountRule records in the query.
func (q productDiscountRuleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count product_discount_rules rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productDiscountRuleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if product_discount_rules exists")
	}

	return count > 0, nil
}

// ProductDiscount pointed to by the foreign key.
func (o *ProductDiscountRule) ProductDiscount(mods ...qm.QueryMod) productDiscountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductDiscountID),
	}

	queryMods = append(queryMods, mods...)

	query := ProductDiscounts(queryMods...)
	queries.SetFrom(query.Query, "\"product_discounts\"")

	return query
}

// Product pointed to by the foreign key.
func (o *ProductDiscountRule) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	return query
}

// LoadProductDiscount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productDiscountRuleL) LoadProductDiscount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductDiscountRule interface{}, mods queries.Applicator) error {
	var slice []*ProductDiscountRule
	var object *ProductDiscountRule

	if singular {
		object = maybeProductDiscountRule.(*ProductDiscountRule)
	} else {
		slice = *maybeProductDiscountRule.(*[]*ProductDiscountRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productDiscountRuleR{}
		}
		args = append(args, object.ProductDiscountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productDiscountRuleR{}
			}

			for _, a := range args {
				if a == obj.ProductDiscountID {
					continue Outer
				}
			}

			args = append(args, obj.ProductDiscountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_discounts`),
		qm.WhereIn(`product_discounts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductDiscount")
	}

	var resultSlice []*ProductDiscount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductDiscount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_discounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_discounts")
	}

	if len(productDiscountRuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDiscount = foreign
		if foreign.R == nil {
			foreign.R = &productDiscountR{}
		}
		foreign.R.ProductDiscountRules = append(foreign.R.ProductDiscountRules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductDiscountID == foreign.ID {
				local.R.ProductDiscount = foreign
				if foreign.R == nil {
					foreign.R = &productDiscountR{}
				}
				foreign.R.ProductDiscountRules = append(foreign.R.ProductDiscountRules, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productDiscountRuleL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductDiscountRule interface{}, mods queries.Applicator) error {
	var slice []*ProductDiscountRule
	var object *ProductDiscountRule

	if singular {
		object = maybeProductDiscountRule.(*ProductDiscountRule)
	} else {
		slice = *maybeProductDiscountRule.(*[]*ProductDiscountRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productDiscountRuleR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productDiscountRuleR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productDiscountRuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductDiscountRules = append(foreign.R.ProductDiscountRules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductDiscountRules = append(foreign.R.ProductDiscountRules, local)
				break
			}
		}
	}

	return nil
}

// SetProductDiscount of the productDiscountRule to the related item.
// Sets o.R.ProductDiscount to related.
// Adds o to related.R.ProductDiscountRules.
func (o *ProductDiscountRule) SetProductDiscount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductDiscount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_discount_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_discount_id"}),
		strmangle.WhereClause("\"", "\"", 2, productDiscountRulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductDiscountID = related.ID
	if o.R == nil {
		o.R = &productDiscountRuleR{
			ProductDiscount: related,
		}
	} else {
		o.R.ProductDiscount = related
	}

	if related.R == nil {
		related.R = &productDiscountR{
			ProductDiscountRules: ProductDiscountRuleSlice{o},
		}
	} else {
		related.R.ProductDiscountRules = append(related.R.ProductDiscountRules, o)
	}

	return nil
}

// SetProduct of the productDiscountRule to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductDiscountRules.
func (o *ProductDiscountRule) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_discount_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productDiscountRulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &productDiscountRuleR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductDiscountRules: ProductDiscountRuleSlice{o},
		}
	} else {
		related.R.ProductDiscountRules = append(related.R.ProductDiscountRules, o)
	}

	return nil
}

// ProductDiscountRules retrieves all the records using an executor.
func ProductDiscountRules(mods ...qm.QueryMod) productDiscountRuleQuery {
	mods = append(mods, qm.From("\"product_discount_rules\""))
	return productDiscountRuleQuery{NewQuery(mods...)}
}

// FindProductDiscountRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductDiscountRule(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductDiscountRule, error) {
	productDiscountRuleObj := &ProductDiscountRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_discount_rules\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productDiscountRuleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from product_discount_rules")
	}

	return productDiscountRuleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductDiscountRule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no product_discount_rules provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productDiscountRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productDiscountRuleInsertCacheMut.RLock()
	cache, cached := productDiscountRuleInsertCache[key]
	productDiscountRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productDiscountRuleAllColumns,
			productDiscountRuleColumnsWithDefault,
			productDiscountRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productDiscountRuleType, productDiscountRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productDiscountRuleType, productDiscountRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_discount_rules\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_discount_rules\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into product_discount_rules")
	}

	if !cached {
		productDiscountRuleInsertCacheMut.Lock()
		productDiscountRuleInsertCache[key] = cache
		productDiscountRuleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductDiscountRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductDiscountRule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productDiscountRuleUpdateCacheMut.RLock()
	cache, cached := productDiscountRuleUpdateCache[key]
	productDiscountRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productDiscountRuleAllColumns,
			productDiscountRulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update product_discount_rules, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_discount_rules\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productDiscountRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productDiscountRuleType, productDiscountRuleMapping, append(wl, productDiscountRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update product_discount_rules row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for product_discount_rules")
	}

	if !cached {
		productDiscountRuleUpdateCacheMut.Lock()
		productDiscountRuleUpdateCache[key] = cache
		productDiscountRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productDiscountRuleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for product_discount_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for product_discount_rules")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductDiscountRuleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productDiscountRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_discount_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productDiscountRulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in productDiscountRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all productDiscountRule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductDiscountRule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no product_discount_rules provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productDiscountRuleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productDiscountRuleUpsertCacheMut.RLock()
	cache, cached := productDiscountRuleUpsertCache[key]
	productDiscountRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productDiscountRuleAllColumns,
			productDiscountRuleColumnsWithDefault,
			productDiscountRuleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productDiscountRuleAllColumns,
			productDiscountRulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert product_discount_rules, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productDiscountRulePrimaryKeyColumns))
			copy(conflict, productDiscountRulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_discount_rules\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productDiscountRuleType, productDiscountRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productDiscountRuleType, productDiscountRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert product_discount_rules")
	}

	if !cached {
		productDiscountRuleUpsertCacheMut.Lock()
		productDiscountRuleUpsertCache[key] = cache
		productDiscountRuleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductDiscountRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductDiscountRule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no ProductDiscountRule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productDiscountRulePrimaryKeyMapping)
	sql := "DELETE FROM \"product_discount_rules\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from product_discount_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for product_discount_rules")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productDiscountRuleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no productDiscountRuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from product_discount_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for product_discount_rules")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductDiscountRuleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productDiscountRuleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productDiscountRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_discount_rules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productDiscountRulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from productDiscountRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for product_discount_rules")
	}

	if len(productDiscountRuleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductDiscountRule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductDiscountRule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductDiscountRuleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductDiscountRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productDiscountRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_discount_rules\".* FROM \"product_discount_rules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productDiscountRulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ProductDiscountRuleSlice")
	}

	*o = slice

	return nil
}

// ProductDiscountRuleExists checks if the ProductDiscountRule row exists.
func ProductDiscountRuleExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_discount_rules\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if product_discount_rules exists")
	}

	return exists, nil
}
