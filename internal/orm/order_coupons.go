// Code generated by SQLBoiler 4.3.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderCoupon is an object representing the database table.
type OrderCoupon struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderID   int64     `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	CouponID  int64     `boil:"coupon_id" json:"coupon_id" toml:"coupon_id" yaml:"coupon_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *orderCouponR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderCouponL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderCouponColumns = struct {
	ID        string
	OrderID   string
	CouponID  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	OrderID:   "order_id",
	CouponID:  "coupon_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

var OrderCouponWhere = struct {
	ID        whereHelperint64
	OrderID   whereHelperint64
	CouponID  whereHelperint64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"order_coupons\".\"id\""},
	OrderID:   whereHelperint64{field: "\"order_coupons\".\"order_id\""},
	CouponID:  whereHelperint64{field: "\"order_coupons\".\"coupon_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"order_coupons\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"order_coupons\".\"updated_at\""},
}

// OrderCouponRels is where relationship names are stored.
var OrderCouponRels = struct {
	Coupon string
	Order  string
}{
	Coupon: "Coupon",
	Order:  "Order",
}

// orderCouponR is where relationships are stored.
type orderCouponR struct {
	Coupon *Coupon `boil:"Coupon" json:"Coupon" toml:"Coupon" yaml:"Coupon"`
	Order  *Order  `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
}

// NewStruct creates a new relationship struct
func (*orderCouponR) NewStruct() *orderCouponR {
	return &orderCouponR{}
}

// orderCouponL is where Load methods for each relationship are stored.
type orderCouponL struct{}

var (
	orderCouponAllColumns            = []string{"id", "order_id", "coupon_id", "created_at", "updated_at"}
	orderCouponColumnsWithoutDefault = []string{"order_id", "coupon_id"}
	orderCouponColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	orderCouponPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrderCouponSlice is an alias for a slice of pointers to OrderCoupon.
	// This should generally be used opposed to []OrderCoupon.
	OrderCouponSlice []*OrderCoupon
	// OrderCouponHook is the signature for custom OrderCoupon hook methods
	OrderCouponHook func(context.Context, boil.ContextExecutor, *OrderCoupon) error

	orderCouponQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderCouponType                 = reflect.TypeOf(&OrderCoupon{})
	orderCouponMapping              = queries.MakeStructMapping(orderCouponType)
	orderCouponPrimaryKeyMapping, _ = queries.BindMapping(orderCouponType, orderCouponMapping, orderCouponPrimaryKeyColumns)
	orderCouponInsertCacheMut       sync.RWMutex
	orderCouponInsertCache          = make(map[string]insertCache)
	orderCouponUpdateCacheMut       sync.RWMutex
	orderCouponUpdateCache          = make(map[string]updateCache)
	orderCouponUpsertCacheMut       sync.RWMutex
	orderCouponUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderCouponBeforeInsertHooks []OrderCouponHook
var orderCouponBeforeUpdateHooks []OrderCouponHook
var orderCouponBeforeDeleteHooks []OrderCouponHook
var orderCouponBeforeUpsertHooks []OrderCouponHook

var orderCouponAfterInsertHooks []OrderCouponHook
var orderCouponAfterSelectHooks []OrderCouponHook
var orderCouponAfterUpdateHooks []OrderCouponHook
var orderCouponAfterDeleteHooks []OrderCouponHook
var orderCouponAfterUpsertHooks []OrderCouponHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderCoupon) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderCouponBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderCoupon) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderCouponBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderCoupon) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderCouponBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderCoupon) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderCouponBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderCoupon) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderCouponAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderCoupon) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderCouponAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderCoupon) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderCouponAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderCoupon) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderCouponAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderCoupon) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderCouponAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderCouponHook registers your hook function for all future operations.
func AddOrderCouponHook(hookPoint boil.HookPoint, orderCouponHook OrderCouponHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		orderCouponBeforeInsertHooks = append(orderCouponBeforeInsertHooks, orderCouponHook)
	case boil.BeforeUpdateHook:
		orderCouponBeforeUpdateHooks = append(orderCouponBeforeUpdateHooks, orderCouponHook)
	case boil.BeforeDeleteHook:
		orderCouponBeforeDeleteHooks = append(orderCouponBeforeDeleteHooks, orderCouponHook)
	case boil.BeforeUpsertHook:
		orderCouponBeforeUpsertHooks = append(orderCouponBeforeUpsertHooks, orderCouponHook)
	case boil.AfterInsertHook:
		orderCouponAfterInsertHooks = append(orderCouponAfterInsertHooks, orderCouponHook)
	case boil.AfterSelectHook:
		orderCouponAfterSelectHooks = append(orderCouponAfterSelectHooks, orderCouponHook)
	case boil.AfterUpdateHook:
		orderCouponAfterUpdateHooks = append(orderCouponAfterUpdateHooks, orderCouponHook)
	case boil.AfterDeleteHook:
		orderCouponAfterDeleteHooks = append(orderCouponAfterDeleteHooks, orderCouponHook)
	case boil.AfterUpsertHook:
		orderCouponAfterUpsertHooks = append(orderCouponAfterUpsertHooks, orderCouponHook)
	}
}

// One returns a single orderCoupon record from the query.
func (q orderCouponQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderCoupon, error) {
	o := &OrderCoupon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for order_coupons")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrderCoupon records from the query.
func (q orderCouponQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderCouponSlice, error) {
	var o []*OrderCoupon

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to OrderCoupon slice")
	}

	if len(orderCouponAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrderCoupon records in the query.
func (q orderCouponQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count order_coupons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderCouponQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if order_coupons exists")
	}

	return count > 0, nil
}

// Coupon pointed to by the foreign key.
func (o *OrderCoupon) Coupon(mods ...qm.QueryMod) couponQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CouponID),
	}

	queryMods = append(queryMods, mods...)

	query := Coupons(queryMods...)
	queries.SetFrom(query.Query, "\"coupons\"")

	return query
}

// Order pointed to by the foreign key.
func (o *OrderCoupon) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	query := Orders(queryMods...)
	queries.SetFrom(query.Query, "\"orders\"")

	return query
}

// LoadCoupon allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderCouponL) LoadCoupon(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderCoupon interface{}, mods queries.Applicator) error {
	var slice []*OrderCoupon
	var object *OrderCoupon

	if singular {
		object = maybeOrderCoupon.(*OrderCoupon)
	} else {
		slice = *maybeOrderCoupon.(*[]*OrderCoupon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderCouponR{}
		}
		args = append(args, object.CouponID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderCouponR{}
			}

			for _, a := range args {
				if a == obj.CouponID {
					continue Outer
				}
			}

			args = append(args, obj.CouponID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`coupons`),
		qm.WhereIn(`coupons.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Coupon")
	}

	var resultSlice []*Coupon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Coupon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for coupons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for coupons")
	}

	if len(orderCouponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Coupon = foreign
		if foreign.R == nil {
			foreign.R = &couponR{}
		}
		foreign.R.OrderCoupons = append(foreign.R.OrderCoupons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CouponID == foreign.ID {
				local.R.Coupon = foreign
				if foreign.R == nil {
					foreign.R = &couponR{}
				}
				foreign.R.OrderCoupons = append(foreign.R.OrderCoupons, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderCouponL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderCoupon interface{}, mods queries.Applicator) error {
	var slice []*OrderCoupon
	var object *OrderCoupon

	if singular {
		object = maybeOrderCoupon.(*OrderCoupon)
	} else {
		slice = *maybeOrderCoupon.(*[]*OrderCoupon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderCouponR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderCouponR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderCouponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderCoupons = append(foreign.R.OrderCoupons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.ID {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderCoupons = append(foreign.R.OrderCoupons, local)
				break
			}
		}
	}

	return nil
}

// SetCoupon of the orderCoupon to the related item.
// Sets o.R.Coupon to related.
// Adds o to related.R.OrderCoupons.
func (o *OrderCoupon) SetCoupon(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Coupon) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_coupons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"coupon_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderCouponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CouponID = related.ID
	if o.R == nil {
		o.R = &orderCouponR{
			Coupon: related,
		}
	} else {
		o.R.Coupon = related
	}

	if related.R == nil {
		related.R = &couponR{
			OrderCoupons: OrderCouponSlice{o},
		}
	} else {
		related.R.OrderCoupons = append(related.R.OrderCoupons, o)
	}

	return nil
}

// SetOrder of the orderCoupon to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderCoupons.
func (o *OrderCoupon) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_coupons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderCouponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.ID
	if o.R == nil {
		o.R = &orderCouponR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderCoupons: OrderCouponSlice{o},
		}
	} else {
		related.R.OrderCoupons = append(related.R.OrderCoupons, o)
	}

	return nil
}

// OrderCoupons retrieves all the records using an executor.
func OrderCoupons(mods ...qm.QueryMod) orderCouponQuery {
	mods = append(mods, qm.From("\"order_coupons\""))
	return orderCouponQuery{NewQuery(mods...)}
}

// FindOrderCoupon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderCoupon(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OrderCoupon, error) {
	orderCouponObj := &OrderCoupon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_coupons\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderCouponObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from order_coupons")
	}

	return orderCouponObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderCoupon) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no order_coupons provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderCouponColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderCouponInsertCacheMut.RLock()
	cache, cached := orderCouponInsertCache[key]
	orderCouponInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderCouponAllColumns,
			orderCouponColumnsWithDefault,
			orderCouponColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderCouponType, orderCouponMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderCouponType, orderCouponMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_coupons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_coupons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into order_coupons")
	}

	if !cached {
		orderCouponInsertCacheMut.Lock()
		orderCouponInsertCache[key] = cache
		orderCouponInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrderCoupon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderCoupon) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderCouponUpdateCacheMut.RLock()
	cache, cached := orderCouponUpdateCache[key]
	orderCouponUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderCouponAllColumns,
			orderCouponPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update order_coupons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_coupons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderCouponPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderCouponType, orderCouponMapping, append(wl, orderCouponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update order_coupons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for order_coupons")
	}

	if !cached {
		orderCouponUpdateCacheMut.Lock()
		orderCouponUpdateCache[key] = cache
		orderCouponUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderCouponQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for order_coupons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for order_coupons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderCouponSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderCouponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_coupons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderCouponPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in orderCoupon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all orderCoupon")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderCoupon) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no order_coupons provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderCouponColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderCouponUpsertCacheMut.RLock()
	cache, cached := orderCouponUpsertCache[key]
	orderCouponUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderCouponAllColumns,
			orderCouponColumnsWithDefault,
			orderCouponColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orderCouponAllColumns,
			orderCouponPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert order_coupons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderCouponPrimaryKeyColumns))
			copy(conflict, orderCouponPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"order_coupons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderCouponType, orderCouponMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderCouponType, orderCouponMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert order_coupons")
	}

	if !cached {
		orderCouponUpsertCacheMut.Lock()
		orderCouponUpsertCache[key] = cache
		orderCouponUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrderCoupon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderCoupon) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no OrderCoupon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderCouponPrimaryKeyMapping)
	sql := "DELETE FROM \"order_coupons\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from order_coupons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for order_coupons")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderCouponQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no orderCouponQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from order_coupons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for order_coupons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderCouponSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderCouponBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderCouponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_coupons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderCouponPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from orderCoupon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for order_coupons")
	}

	if len(orderCouponAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderCoupon) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderCoupon(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderCouponSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderCouponSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderCouponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_coupons\".* FROM \"order_coupons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderCouponPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in OrderCouponSlice")
	}

	*o = slice

	return nil
}

// OrderCouponExists checks if the OrderCoupon row exists.
func OrderCouponExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_coupons\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if order_coupons exists")
	}

	return exists, nil
}
