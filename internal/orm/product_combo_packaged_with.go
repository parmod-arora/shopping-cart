// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductComboPackagedWith is an object representing the database table.
type ProductComboPackagedWith struct {
	ID                    int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductComboPackageID int64     `boil:"product_combo_package_id" json:"product_combo_package_id" toml:"product_combo_package_id" yaml:"product_combo_package_id"`
	ProductID             int64     `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	PackagedWithProductID int64     `boil:"packaged_with_product_id" json:"packaged_with_product_id" toml:"packaged_with_product_id" yaml:"packaged_with_product_id"`
	CreatedAt             time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *productComboPackagedWithR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productComboPackagedWithL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductComboPackagedWithColumns = struct {
	ID                    string
	ProductComboPackageID string
	ProductID             string
	PackagedWithProductID string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "id",
	ProductComboPackageID: "product_combo_package_id",
	ProductID:             "product_id",
	PackagedWithProductID: "packaged_with_product_id",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
}

// Generated where

var ProductComboPackagedWithWhere = struct {
	ID                    whereHelperint64
	ProductComboPackageID whereHelperint64
	ProductID             whereHelperint64
	PackagedWithProductID whereHelperint64
	CreatedAt             whereHelpertime_Time
	UpdatedAt             whereHelpertime_Time
}{
	ID:                    whereHelperint64{field: "\"product_combo_packaged_with\".\"id\""},
	ProductComboPackageID: whereHelperint64{field: "\"product_combo_packaged_with\".\"product_combo_package_id\""},
	ProductID:             whereHelperint64{field: "\"product_combo_packaged_with\".\"product_id\""},
	PackagedWithProductID: whereHelperint64{field: "\"product_combo_packaged_with\".\"packaged_with_product_id\""},
	CreatedAt:             whereHelpertime_Time{field: "\"product_combo_packaged_with\".\"created_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"product_combo_packaged_with\".\"updated_at\""},
}

// ProductComboPackagedWithRels is where relationship names are stored.
var ProductComboPackagedWithRels = struct {
	PackagedWithProduct string
	Product             string
}{
	PackagedWithProduct: "PackagedWithProduct",
	Product:             "Product",
}

// productComboPackagedWithR is where relationships are stored.
type productComboPackagedWithR struct {
	PackagedWithProduct *Product `boil:"PackagedWithProduct" json:"PackagedWithProduct" toml:"PackagedWithProduct" yaml:"PackagedWithProduct"`
	Product             *Product `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*productComboPackagedWithR) NewStruct() *productComboPackagedWithR {
	return &productComboPackagedWithR{}
}

// productComboPackagedWithL is where Load methods for each relationship are stored.
type productComboPackagedWithL struct{}

var (
	productComboPackagedWithAllColumns            = []string{"id", "product_combo_package_id", "product_id", "packaged_with_product_id", "created_at", "updated_at"}
	productComboPackagedWithColumnsWithoutDefault = []string{"product_combo_package_id", "product_id", "packaged_with_product_id"}
	productComboPackagedWithColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	productComboPackagedWithPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProductComboPackagedWithSlice is an alias for a slice of pointers to ProductComboPackagedWith.
	// This should generally be used opposed to []ProductComboPackagedWith.
	ProductComboPackagedWithSlice []*ProductComboPackagedWith
	// ProductComboPackagedWithHook is the signature for custom ProductComboPackagedWith hook methods
	ProductComboPackagedWithHook func(context.Context, boil.ContextExecutor, *ProductComboPackagedWith) error

	productComboPackagedWithQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productComboPackagedWithType                 = reflect.TypeOf(&ProductComboPackagedWith{})
	productComboPackagedWithMapping              = queries.MakeStructMapping(productComboPackagedWithType)
	productComboPackagedWithPrimaryKeyMapping, _ = queries.BindMapping(productComboPackagedWithType, productComboPackagedWithMapping, productComboPackagedWithPrimaryKeyColumns)
	productComboPackagedWithInsertCacheMut       sync.RWMutex
	productComboPackagedWithInsertCache          = make(map[string]insertCache)
	productComboPackagedWithUpdateCacheMut       sync.RWMutex
	productComboPackagedWithUpdateCache          = make(map[string]updateCache)
	productComboPackagedWithUpsertCacheMut       sync.RWMutex
	productComboPackagedWithUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productComboPackagedWithBeforeInsertHooks []ProductComboPackagedWithHook
var productComboPackagedWithBeforeUpdateHooks []ProductComboPackagedWithHook
var productComboPackagedWithBeforeDeleteHooks []ProductComboPackagedWithHook
var productComboPackagedWithBeforeUpsertHooks []ProductComboPackagedWithHook

var productComboPackagedWithAfterInsertHooks []ProductComboPackagedWithHook
var productComboPackagedWithAfterSelectHooks []ProductComboPackagedWithHook
var productComboPackagedWithAfterUpdateHooks []ProductComboPackagedWithHook
var productComboPackagedWithAfterDeleteHooks []ProductComboPackagedWithHook
var productComboPackagedWithAfterUpsertHooks []ProductComboPackagedWithHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductComboPackagedWith) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboPackagedWithBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductComboPackagedWith) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboPackagedWithBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductComboPackagedWith) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboPackagedWithBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductComboPackagedWith) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboPackagedWithBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductComboPackagedWith) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboPackagedWithAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductComboPackagedWith) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboPackagedWithAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductComboPackagedWith) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboPackagedWithAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductComboPackagedWith) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboPackagedWithAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductComboPackagedWith) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboPackagedWithAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductComboPackagedWithHook registers your hook function for all future operations.
func AddProductComboPackagedWithHook(hookPoint boil.HookPoint, productComboPackagedWithHook ProductComboPackagedWithHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		productComboPackagedWithBeforeInsertHooks = append(productComboPackagedWithBeforeInsertHooks, productComboPackagedWithHook)
	case boil.BeforeUpdateHook:
		productComboPackagedWithBeforeUpdateHooks = append(productComboPackagedWithBeforeUpdateHooks, productComboPackagedWithHook)
	case boil.BeforeDeleteHook:
		productComboPackagedWithBeforeDeleteHooks = append(productComboPackagedWithBeforeDeleteHooks, productComboPackagedWithHook)
	case boil.BeforeUpsertHook:
		productComboPackagedWithBeforeUpsertHooks = append(productComboPackagedWithBeforeUpsertHooks, productComboPackagedWithHook)
	case boil.AfterInsertHook:
		productComboPackagedWithAfterInsertHooks = append(productComboPackagedWithAfterInsertHooks, productComboPackagedWithHook)
	case boil.AfterSelectHook:
		productComboPackagedWithAfterSelectHooks = append(productComboPackagedWithAfterSelectHooks, productComboPackagedWithHook)
	case boil.AfterUpdateHook:
		productComboPackagedWithAfterUpdateHooks = append(productComboPackagedWithAfterUpdateHooks, productComboPackagedWithHook)
	case boil.AfterDeleteHook:
		productComboPackagedWithAfterDeleteHooks = append(productComboPackagedWithAfterDeleteHooks, productComboPackagedWithHook)
	case boil.AfterUpsertHook:
		productComboPackagedWithAfterUpsertHooks = append(productComboPackagedWithAfterUpsertHooks, productComboPackagedWithHook)
	}
}

// One returns a single productComboPackagedWith record from the query.
func (q productComboPackagedWithQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductComboPackagedWith, error) {
	o := &ProductComboPackagedWith{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for product_combo_packaged_with")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductComboPackagedWith records from the query.
func (q productComboPackagedWithQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductComboPackagedWithSlice, error) {
	var o []*ProductComboPackagedWith

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to ProductComboPackagedWith slice")
	}

	if len(productComboPackagedWithAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductComboPackagedWith records in the query.
func (q productComboPackagedWithQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count product_combo_packaged_with rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productComboPackagedWithQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if product_combo_packaged_with exists")
	}

	return count > 0, nil
}

// PackagedWithProduct pointed to by the foreign key.
func (o *ProductComboPackagedWith) PackagedWithProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PackagedWithProductID),
	}

	queryMods = append(queryMods, mods...)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	return query
}

// Product pointed to by the foreign key.
func (o *ProductComboPackagedWith) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	return query
}

// LoadPackagedWithProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productComboPackagedWithL) LoadPackagedWithProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductComboPackagedWith interface{}, mods queries.Applicator) error {
	var slice []*ProductComboPackagedWith
	var object *ProductComboPackagedWith

	if singular {
		object = maybeProductComboPackagedWith.(*ProductComboPackagedWith)
	} else {
		slice = *maybeProductComboPackagedWith.(*[]*ProductComboPackagedWith)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productComboPackagedWithR{}
		}
		args = append(args, object.PackagedWithProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productComboPackagedWithR{}
			}

			for _, a := range args {
				if a == obj.PackagedWithProductID {
					continue Outer
				}
			}

			args = append(args, obj.PackagedWithProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productComboPackagedWithAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PackagedWithProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.PackagedWithProductProductComboPackagedWiths = append(foreign.R.PackagedWithProductProductComboPackagedWiths, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PackagedWithProductID == foreign.ID {
				local.R.PackagedWithProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.PackagedWithProductProductComboPackagedWiths = append(foreign.R.PackagedWithProductProductComboPackagedWiths, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productComboPackagedWithL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductComboPackagedWith interface{}, mods queries.Applicator) error {
	var slice []*ProductComboPackagedWith
	var object *ProductComboPackagedWith

	if singular {
		object = maybeProductComboPackagedWith.(*ProductComboPackagedWith)
	} else {
		slice = *maybeProductComboPackagedWith.(*[]*ProductComboPackagedWith)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productComboPackagedWithR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productComboPackagedWithR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productComboPackagedWithAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductComboPackagedWiths = append(foreign.R.ProductComboPackagedWiths, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductComboPackagedWiths = append(foreign.R.ProductComboPackagedWiths, local)
				break
			}
		}
	}

	return nil
}

// SetPackagedWithProduct of the productComboPackagedWith to the related item.
// Sets o.R.PackagedWithProduct to related.
// Adds o to related.R.PackagedWithProductProductComboPackagedWiths.
func (o *ProductComboPackagedWith) SetPackagedWithProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_combo_packaged_with\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"packaged_with_product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productComboPackagedWithPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PackagedWithProductID = related.ID
	if o.R == nil {
		o.R = &productComboPackagedWithR{
			PackagedWithProduct: related,
		}
	} else {
		o.R.PackagedWithProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			PackagedWithProductProductComboPackagedWiths: ProductComboPackagedWithSlice{o},
		}
	} else {
		related.R.PackagedWithProductProductComboPackagedWiths = append(related.R.PackagedWithProductProductComboPackagedWiths, o)
	}

	return nil
}

// SetProduct of the productComboPackagedWith to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductComboPackagedWiths.
func (o *ProductComboPackagedWith) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_combo_packaged_with\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productComboPackagedWithPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &productComboPackagedWithR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductComboPackagedWiths: ProductComboPackagedWithSlice{o},
		}
	} else {
		related.R.ProductComboPackagedWiths = append(related.R.ProductComboPackagedWiths, o)
	}

	return nil
}

// ProductComboPackagedWiths retrieves all the records using an executor.
func ProductComboPackagedWiths(mods ...qm.QueryMod) productComboPackagedWithQuery {
	mods = append(mods, qm.From("\"product_combo_packaged_with\""))
	return productComboPackagedWithQuery{NewQuery(mods...)}
}

// FindProductComboPackagedWith retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductComboPackagedWith(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductComboPackagedWith, error) {
	productComboPackagedWithObj := &ProductComboPackagedWith{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_combo_packaged_with\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productComboPackagedWithObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from product_combo_packaged_with")
	}

	return productComboPackagedWithObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductComboPackagedWith) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no product_combo_packaged_with provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productComboPackagedWithColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productComboPackagedWithInsertCacheMut.RLock()
	cache, cached := productComboPackagedWithInsertCache[key]
	productComboPackagedWithInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productComboPackagedWithAllColumns,
			productComboPackagedWithColumnsWithDefault,
			productComboPackagedWithColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productComboPackagedWithType, productComboPackagedWithMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productComboPackagedWithType, productComboPackagedWithMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_combo_packaged_with\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_combo_packaged_with\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into product_combo_packaged_with")
	}

	if !cached {
		productComboPackagedWithInsertCacheMut.Lock()
		productComboPackagedWithInsertCache[key] = cache
		productComboPackagedWithInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductComboPackagedWith.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductComboPackagedWith) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productComboPackagedWithUpdateCacheMut.RLock()
	cache, cached := productComboPackagedWithUpdateCache[key]
	productComboPackagedWithUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productComboPackagedWithAllColumns,
			productComboPackagedWithPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update product_combo_packaged_with, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_combo_packaged_with\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productComboPackagedWithPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productComboPackagedWithType, productComboPackagedWithMapping, append(wl, productComboPackagedWithPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update product_combo_packaged_with row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for product_combo_packaged_with")
	}

	if !cached {
		productComboPackagedWithUpdateCacheMut.Lock()
		productComboPackagedWithUpdateCache[key] = cache
		productComboPackagedWithUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productComboPackagedWithQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for product_combo_packaged_with")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for product_combo_packaged_with")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductComboPackagedWithSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productComboPackagedWithPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_combo_packaged_with\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productComboPackagedWithPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in productComboPackagedWith slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all productComboPackagedWith")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductComboPackagedWith) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no product_combo_packaged_with provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productComboPackagedWithColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productComboPackagedWithUpsertCacheMut.RLock()
	cache, cached := productComboPackagedWithUpsertCache[key]
	productComboPackagedWithUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productComboPackagedWithAllColumns,
			productComboPackagedWithColumnsWithDefault,
			productComboPackagedWithColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productComboPackagedWithAllColumns,
			productComboPackagedWithPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert product_combo_packaged_with, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productComboPackagedWithPrimaryKeyColumns))
			copy(conflict, productComboPackagedWithPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_combo_packaged_with\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productComboPackagedWithType, productComboPackagedWithMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productComboPackagedWithType, productComboPackagedWithMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert product_combo_packaged_with")
	}

	if !cached {
		productComboPackagedWithUpsertCacheMut.Lock()
		productComboPackagedWithUpsertCache[key] = cache
		productComboPackagedWithUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductComboPackagedWith record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductComboPackagedWith) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no ProductComboPackagedWith provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productComboPackagedWithPrimaryKeyMapping)
	sql := "DELETE FROM \"product_combo_packaged_with\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from product_combo_packaged_with")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for product_combo_packaged_with")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productComboPackagedWithQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no productComboPackagedWithQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from product_combo_packaged_with")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for product_combo_packaged_with")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductComboPackagedWithSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productComboPackagedWithBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productComboPackagedWithPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_combo_packaged_with\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productComboPackagedWithPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from productComboPackagedWith slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for product_combo_packaged_with")
	}

	if len(productComboPackagedWithAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductComboPackagedWith) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductComboPackagedWith(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductComboPackagedWithSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductComboPackagedWithSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productComboPackagedWithPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_combo_packaged_with\".* FROM \"product_combo_packaged_with\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productComboPackagedWithPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ProductComboPackagedWithSlice")
	}

	*o = slice

	return nil
}

// ProductComboPackagedWithExists checks if the ProductComboPackagedWith row exists.
func ProductComboPackagedWithExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_combo_packaged_with\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if product_combo_packaged_with exists")
	}

	return exists, nil
}
