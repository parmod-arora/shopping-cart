// Code generated by SQLBoiler 4.3.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductComboDiscount is an object representing the database table.
type ProductComboDiscount struct {
	ID                            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                          string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	ProductID                     int64     `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	ProductQuantity               int64     `boil:"product_quantity" json:"product_quantity" toml:"product_quantity" yaml:"product_quantity"`
	ProductQuantityFN             string    `boil:"product_quantity_fn" json:"product_quantity_fn" toml:"product_quantity_fn" yaml:"product_quantity_fn"`
	DiscountType                  string    `boil:"discount_type" json:"discount_type" toml:"discount_type" yaml:"discount_type"`
	Discount                      int64     `boil:"discount" json:"discount" toml:"discount" yaml:"discount"`
	PackagedWithProductID         int64     `boil:"packaged_with_product_id" json:"packaged_with_product_id" toml:"packaged_with_product_id" yaml:"packaged_with_product_id"`
	PackagedWithProductQuantity   int64     `boil:"packaged_with_product_quantity" json:"packaged_with_product_quantity" toml:"packaged_with_product_quantity" yaml:"packaged_with_product_quantity"`
	PackagedWithProductQuantityFN string    `boil:"packaged_with_product_quantity_fn" json:"packaged_with_product_quantity_fn" toml:"packaged_with_product_quantity_fn" yaml:"packaged_with_product_quantity_fn"`
	CreatedAt                     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *productComboDiscountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productComboDiscountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductComboDiscountColumns = struct {
	ID                            string
	Name                          string
	ProductID                     string
	ProductQuantity               string
	ProductQuantityFN             string
	DiscountType                  string
	Discount                      string
	PackagedWithProductID         string
	PackagedWithProductQuantity   string
	PackagedWithProductQuantityFN string
	CreatedAt                     string
	UpdatedAt                     string
}{
	ID:                            "id",
	Name:                          "name",
	ProductID:                     "product_id",
	ProductQuantity:               "product_quantity",
	ProductQuantityFN:             "product_quantity_fn",
	DiscountType:                  "discount_type",
	Discount:                      "discount",
	PackagedWithProductID:         "packaged_with_product_id",
	PackagedWithProductQuantity:   "packaged_with_product_quantity",
	PackagedWithProductQuantityFN: "packaged_with_product_quantity_fn",
	CreatedAt:                     "created_at",
	UpdatedAt:                     "updated_at",
}

// Generated where

var ProductComboDiscountWhere = struct {
	ID                            whereHelperint64
	Name                          whereHelperstring
	ProductID                     whereHelperint64
	ProductQuantity               whereHelperint64
	ProductQuantityFN             whereHelperstring
	DiscountType                  whereHelperstring
	Discount                      whereHelperint64
	PackagedWithProductID         whereHelperint64
	PackagedWithProductQuantity   whereHelperint64
	PackagedWithProductQuantityFN whereHelperstring
	CreatedAt                     whereHelpertime_Time
	UpdatedAt                     whereHelpertime_Time
}{
	ID:                            whereHelperint64{field: "\"product_combo_discount\".\"id\""},
	Name:                          whereHelperstring{field: "\"product_combo_discount\".\"name\""},
	ProductID:                     whereHelperint64{field: "\"product_combo_discount\".\"product_id\""},
	ProductQuantity:               whereHelperint64{field: "\"product_combo_discount\".\"product_quantity\""},
	ProductQuantityFN:             whereHelperstring{field: "\"product_combo_discount\".\"product_quantity_fn\""},
	DiscountType:                  whereHelperstring{field: "\"product_combo_discount\".\"discount_type\""},
	Discount:                      whereHelperint64{field: "\"product_combo_discount\".\"discount\""},
	PackagedWithProductID:         whereHelperint64{field: "\"product_combo_discount\".\"packaged_with_product_id\""},
	PackagedWithProductQuantity:   whereHelperint64{field: "\"product_combo_discount\".\"packaged_with_product_quantity\""},
	PackagedWithProductQuantityFN: whereHelperstring{field: "\"product_combo_discount\".\"packaged_with_product_quantity_fn\""},
	CreatedAt:                     whereHelpertime_Time{field: "\"product_combo_discount\".\"created_at\""},
	UpdatedAt:                     whereHelpertime_Time{field: "\"product_combo_discount\".\"updated_at\""},
}

// ProductComboDiscountRels is where relationship names are stored.
var ProductComboDiscountRels = struct {
	PackagedWithProduct string
	Product             string
}{
	PackagedWithProduct: "PackagedWithProduct",
	Product:             "Product",
}

// productComboDiscountR is where relationships are stored.
type productComboDiscountR struct {
	PackagedWithProduct *Product `boil:"PackagedWithProduct" json:"PackagedWithProduct" toml:"PackagedWithProduct" yaml:"PackagedWithProduct"`
	Product             *Product `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*productComboDiscountR) NewStruct() *productComboDiscountR {
	return &productComboDiscountR{}
}

// productComboDiscountL is where Load methods for each relationship are stored.
type productComboDiscountL struct{}

var (
	productComboDiscountAllColumns            = []string{"id", "name", "product_id", "product_quantity", "product_quantity_fn", "discount_type", "discount", "packaged_with_product_id", "packaged_with_product_quantity", "packaged_with_product_quantity_fn", "created_at", "updated_at"}
	productComboDiscountColumnsWithoutDefault = []string{"name", "product_id", "product_quantity", "product_quantity_fn", "discount_type", "discount", "packaged_with_product_id", "packaged_with_product_quantity", "packaged_with_product_quantity_fn"}
	productComboDiscountColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	productComboDiscountPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProductComboDiscountSlice is an alias for a slice of pointers to ProductComboDiscount.
	// This should generally be used opposed to []ProductComboDiscount.
	ProductComboDiscountSlice []*ProductComboDiscount
	// ProductComboDiscountHook is the signature for custom ProductComboDiscount hook methods
	ProductComboDiscountHook func(context.Context, boil.ContextExecutor, *ProductComboDiscount) error

	productComboDiscountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productComboDiscountType                 = reflect.TypeOf(&ProductComboDiscount{})
	productComboDiscountMapping              = queries.MakeStructMapping(productComboDiscountType)
	productComboDiscountPrimaryKeyMapping, _ = queries.BindMapping(productComboDiscountType, productComboDiscountMapping, productComboDiscountPrimaryKeyColumns)
	productComboDiscountInsertCacheMut       sync.RWMutex
	productComboDiscountInsertCache          = make(map[string]insertCache)
	productComboDiscountUpdateCacheMut       sync.RWMutex
	productComboDiscountUpdateCache          = make(map[string]updateCache)
	productComboDiscountUpsertCacheMut       sync.RWMutex
	productComboDiscountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productComboDiscountBeforeInsertHooks []ProductComboDiscountHook
var productComboDiscountBeforeUpdateHooks []ProductComboDiscountHook
var productComboDiscountBeforeDeleteHooks []ProductComboDiscountHook
var productComboDiscountBeforeUpsertHooks []ProductComboDiscountHook

var productComboDiscountAfterInsertHooks []ProductComboDiscountHook
var productComboDiscountAfterSelectHooks []ProductComboDiscountHook
var productComboDiscountAfterUpdateHooks []ProductComboDiscountHook
var productComboDiscountAfterDeleteHooks []ProductComboDiscountHook
var productComboDiscountAfterUpsertHooks []ProductComboDiscountHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductComboDiscount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboDiscountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductComboDiscount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboDiscountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductComboDiscount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboDiscountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductComboDiscount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboDiscountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductComboDiscount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboDiscountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductComboDiscount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboDiscountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductComboDiscount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboDiscountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductComboDiscount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboDiscountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductComboDiscount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productComboDiscountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductComboDiscountHook registers your hook function for all future operations.
func AddProductComboDiscountHook(hookPoint boil.HookPoint, productComboDiscountHook ProductComboDiscountHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		productComboDiscountBeforeInsertHooks = append(productComboDiscountBeforeInsertHooks, productComboDiscountHook)
	case boil.BeforeUpdateHook:
		productComboDiscountBeforeUpdateHooks = append(productComboDiscountBeforeUpdateHooks, productComboDiscountHook)
	case boil.BeforeDeleteHook:
		productComboDiscountBeforeDeleteHooks = append(productComboDiscountBeforeDeleteHooks, productComboDiscountHook)
	case boil.BeforeUpsertHook:
		productComboDiscountBeforeUpsertHooks = append(productComboDiscountBeforeUpsertHooks, productComboDiscountHook)
	case boil.AfterInsertHook:
		productComboDiscountAfterInsertHooks = append(productComboDiscountAfterInsertHooks, productComboDiscountHook)
	case boil.AfterSelectHook:
		productComboDiscountAfterSelectHooks = append(productComboDiscountAfterSelectHooks, productComboDiscountHook)
	case boil.AfterUpdateHook:
		productComboDiscountAfterUpdateHooks = append(productComboDiscountAfterUpdateHooks, productComboDiscountHook)
	case boil.AfterDeleteHook:
		productComboDiscountAfterDeleteHooks = append(productComboDiscountAfterDeleteHooks, productComboDiscountHook)
	case boil.AfterUpsertHook:
		productComboDiscountAfterUpsertHooks = append(productComboDiscountAfterUpsertHooks, productComboDiscountHook)
	}
}

// One returns a single productComboDiscount record from the query.
func (q productComboDiscountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductComboDiscount, error) {
	o := &ProductComboDiscount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for product_combo_discount")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductComboDiscount records from the query.
func (q productComboDiscountQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductComboDiscountSlice, error) {
	var o []*ProductComboDiscount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to ProductComboDiscount slice")
	}

	if len(productComboDiscountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductComboDiscount records in the query.
func (q productComboDiscountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count product_combo_discount rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productComboDiscountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if product_combo_discount exists")
	}

	return count > 0, nil
}

// PackagedWithProduct pointed to by the foreign key.
func (o *ProductComboDiscount) PackagedWithProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PackagedWithProductID),
	}

	queryMods = append(queryMods, mods...)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	return query
}

// Product pointed to by the foreign key.
func (o *ProductComboDiscount) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	return query
}

// LoadPackagedWithProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productComboDiscountL) LoadPackagedWithProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductComboDiscount interface{}, mods queries.Applicator) error {
	var slice []*ProductComboDiscount
	var object *ProductComboDiscount

	if singular {
		object = maybeProductComboDiscount.(*ProductComboDiscount)
	} else {
		slice = *maybeProductComboDiscount.(*[]*ProductComboDiscount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productComboDiscountR{}
		}
		args = append(args, object.PackagedWithProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productComboDiscountR{}
			}

			for _, a := range args {
				if a == obj.PackagedWithProductID {
					continue Outer
				}
			}

			args = append(args, obj.PackagedWithProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productComboDiscountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PackagedWithProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.PackagedWithProductProductComboDiscounts = append(foreign.R.PackagedWithProductProductComboDiscounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PackagedWithProductID == foreign.ID {
				local.R.PackagedWithProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.PackagedWithProductProductComboDiscounts = append(foreign.R.PackagedWithProductProductComboDiscounts, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productComboDiscountL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductComboDiscount interface{}, mods queries.Applicator) error {
	var slice []*ProductComboDiscount
	var object *ProductComboDiscount

	if singular {
		object = maybeProductComboDiscount.(*ProductComboDiscount)
	} else {
		slice = *maybeProductComboDiscount.(*[]*ProductComboDiscount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productComboDiscountR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productComboDiscountR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productComboDiscountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductComboDiscounts = append(foreign.R.ProductComboDiscounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductComboDiscounts = append(foreign.R.ProductComboDiscounts, local)
				break
			}
		}
	}

	return nil
}

// SetPackagedWithProduct of the productComboDiscount to the related item.
// Sets o.R.PackagedWithProduct to related.
// Adds o to related.R.PackagedWithProductProductComboDiscounts.
func (o *ProductComboDiscount) SetPackagedWithProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_combo_discount\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"packaged_with_product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productComboDiscountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PackagedWithProductID = related.ID
	if o.R == nil {
		o.R = &productComboDiscountR{
			PackagedWithProduct: related,
		}
	} else {
		o.R.PackagedWithProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			PackagedWithProductProductComboDiscounts: ProductComboDiscountSlice{o},
		}
	} else {
		related.R.PackagedWithProductProductComboDiscounts = append(related.R.PackagedWithProductProductComboDiscounts, o)
	}

	return nil
}

// SetProduct of the productComboDiscount to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductComboDiscounts.
func (o *ProductComboDiscount) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_combo_discount\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productComboDiscountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &productComboDiscountR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductComboDiscounts: ProductComboDiscountSlice{o},
		}
	} else {
		related.R.ProductComboDiscounts = append(related.R.ProductComboDiscounts, o)
	}

	return nil
}

// ProductComboDiscounts retrieves all the records using an executor.
func ProductComboDiscounts(mods ...qm.QueryMod) productComboDiscountQuery {
	mods = append(mods, qm.From("\"product_combo_discount\""))
	return productComboDiscountQuery{NewQuery(mods...)}
}

// FindProductComboDiscount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductComboDiscount(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductComboDiscount, error) {
	productComboDiscountObj := &ProductComboDiscount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_combo_discount\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productComboDiscountObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from product_combo_discount")
	}

	return productComboDiscountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductComboDiscount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no product_combo_discount provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productComboDiscountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productComboDiscountInsertCacheMut.RLock()
	cache, cached := productComboDiscountInsertCache[key]
	productComboDiscountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productComboDiscountAllColumns,
			productComboDiscountColumnsWithDefault,
			productComboDiscountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productComboDiscountType, productComboDiscountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productComboDiscountType, productComboDiscountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_combo_discount\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_combo_discount\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into product_combo_discount")
	}

	if !cached {
		productComboDiscountInsertCacheMut.Lock()
		productComboDiscountInsertCache[key] = cache
		productComboDiscountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductComboDiscount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductComboDiscount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productComboDiscountUpdateCacheMut.RLock()
	cache, cached := productComboDiscountUpdateCache[key]
	productComboDiscountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productComboDiscountAllColumns,
			productComboDiscountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update product_combo_discount, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_combo_discount\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productComboDiscountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productComboDiscountType, productComboDiscountMapping, append(wl, productComboDiscountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update product_combo_discount row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for product_combo_discount")
	}

	if !cached {
		productComboDiscountUpdateCacheMut.Lock()
		productComboDiscountUpdateCache[key] = cache
		productComboDiscountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productComboDiscountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for product_combo_discount")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for product_combo_discount")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductComboDiscountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productComboDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_combo_discount\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productComboDiscountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in productComboDiscount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all productComboDiscount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductComboDiscount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no product_combo_discount provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productComboDiscountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productComboDiscountUpsertCacheMut.RLock()
	cache, cached := productComboDiscountUpsertCache[key]
	productComboDiscountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productComboDiscountAllColumns,
			productComboDiscountColumnsWithDefault,
			productComboDiscountColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productComboDiscountAllColumns,
			productComboDiscountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert product_combo_discount, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productComboDiscountPrimaryKeyColumns))
			copy(conflict, productComboDiscountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_combo_discount\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productComboDiscountType, productComboDiscountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productComboDiscountType, productComboDiscountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert product_combo_discount")
	}

	if !cached {
		productComboDiscountUpsertCacheMut.Lock()
		productComboDiscountUpsertCache[key] = cache
		productComboDiscountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductComboDiscount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductComboDiscount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no ProductComboDiscount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productComboDiscountPrimaryKeyMapping)
	sql := "DELETE FROM \"product_combo_discount\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from product_combo_discount")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for product_combo_discount")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productComboDiscountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no productComboDiscountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from product_combo_discount")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for product_combo_discount")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductComboDiscountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productComboDiscountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productComboDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_combo_discount\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productComboDiscountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from productComboDiscount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for product_combo_discount")
	}

	if len(productComboDiscountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductComboDiscount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductComboDiscount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductComboDiscountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductComboDiscountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productComboDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_combo_discount\".* FROM \"product_combo_discount\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productComboDiscountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ProductComboDiscountSlice")
	}

	*o = slice

	return nil
}

// ProductComboDiscountExists checks if the ProductComboDiscount row exists.
func ProductComboDiscountExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_combo_discount\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if product_combo_discount exists")
	}

	return exists, nil
}
