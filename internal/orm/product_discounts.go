// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductDiscount is an object representing the database table.
type ProductDiscount struct {
	ID                 int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductID          int64      `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	Type               string     `boil:"type" json:"type" toml:"type" yaml:"type"`
	MinQuantity        int64      `boil:"min_quantity" json:"min_quantity" toml:"min_quantity" yaml:"min_quantity"`
	MaxQuantity        int64      `boil:"max_quantity" json:"max_quantity" toml:"max_quantity" yaml:"max_quantity"`
	ComboPackageID     null.Int64 `boil:"combo_package_id" json:"combo_package_id,omitempty" toml:"combo_package_id" yaml:"combo_package_id,omitempty"`
	Discount           null.Int64 `boil:"discount" json:"discount,omitempty" toml:"discount" yaml:"discount,omitempty"`
	EffectiveStartDate time.Time  `boil:"effective_start_date" json:"effective_start_date" toml:"effective_start_date" yaml:"effective_start_date"`
	EffectiveEndDate   null.Time  `boil:"effective_end_date" json:"effective_end_date,omitempty" toml:"effective_end_date" yaml:"effective_end_date,omitempty"`
	CreatedAt          time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *productDiscountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productDiscountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductDiscountColumns = struct {
	ID                 string
	ProductID          string
	Type               string
	MinQuantity        string
	MaxQuantity        string
	ComboPackageID     string
	Discount           string
	EffectiveStartDate string
	EffectiveEndDate   string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	ProductID:          "product_id",
	Type:               "type",
	MinQuantity:        "min_quantity",
	MaxQuantity:        "max_quantity",
	ComboPackageID:     "combo_package_id",
	Discount:           "discount",
	EffectiveStartDate: "effective_start_date",
	EffectiveEndDate:   "effective_end_date",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ProductDiscountWhere = struct {
	ID                 whereHelperint64
	ProductID          whereHelperint64
	Type               whereHelperstring
	MinQuantity        whereHelperint64
	MaxQuantity        whereHelperint64
	ComboPackageID     whereHelpernull_Int64
	Discount           whereHelpernull_Int64
	EffectiveStartDate whereHelpertime_Time
	EffectiveEndDate   whereHelpernull_Time
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperint64{field: "\"product_discounts\".\"id\""},
	ProductID:          whereHelperint64{field: "\"product_discounts\".\"product_id\""},
	Type:               whereHelperstring{field: "\"product_discounts\".\"type\""},
	MinQuantity:        whereHelperint64{field: "\"product_discounts\".\"min_quantity\""},
	MaxQuantity:        whereHelperint64{field: "\"product_discounts\".\"max_quantity\""},
	ComboPackageID:     whereHelpernull_Int64{field: "\"product_discounts\".\"combo_package_id\""},
	Discount:           whereHelpernull_Int64{field: "\"product_discounts\".\"discount\""},
	EffectiveStartDate: whereHelpertime_Time{field: "\"product_discounts\".\"effective_start_date\""},
	EffectiveEndDate:   whereHelpernull_Time{field: "\"product_discounts\".\"effective_end_date\""},
	CreatedAt:          whereHelpertime_Time{field: "\"product_discounts\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"product_discounts\".\"updated_at\""},
}

// ProductDiscountRels is where relationship names are stored.
var ProductDiscountRels = struct {
	ComboPackage string
	Product      string
}{
	ComboPackage: "ComboPackage",
	Product:      "Product",
}

// productDiscountR is where relationships are stored.
type productDiscountR struct {
	ComboPackage *ProductComboPackage `boil:"ComboPackage" json:"ComboPackage" toml:"ComboPackage" yaml:"ComboPackage"`
	Product      *Product             `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*productDiscountR) NewStruct() *productDiscountR {
	return &productDiscountR{}
}

// productDiscountL is where Load methods for each relationship are stored.
type productDiscountL struct{}

var (
	productDiscountAllColumns            = []string{"id", "product_id", "type", "min_quantity", "max_quantity", "combo_package_id", "discount", "effective_start_date", "effective_end_date", "created_at", "updated_at"}
	productDiscountColumnsWithoutDefault = []string{"product_id", "type", "min_quantity", "max_quantity", "combo_package_id", "discount", "effective_start_date", "effective_end_date"}
	productDiscountColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	productDiscountPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProductDiscountSlice is an alias for a slice of pointers to ProductDiscount.
	// This should generally be used opposed to []ProductDiscount.
	ProductDiscountSlice []*ProductDiscount
	// ProductDiscountHook is the signature for custom ProductDiscount hook methods
	ProductDiscountHook func(context.Context, boil.ContextExecutor, *ProductDiscount) error

	productDiscountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productDiscountType                 = reflect.TypeOf(&ProductDiscount{})
	productDiscountMapping              = queries.MakeStructMapping(productDiscountType)
	productDiscountPrimaryKeyMapping, _ = queries.BindMapping(productDiscountType, productDiscountMapping, productDiscountPrimaryKeyColumns)
	productDiscountInsertCacheMut       sync.RWMutex
	productDiscountInsertCache          = make(map[string]insertCache)
	productDiscountUpdateCacheMut       sync.RWMutex
	productDiscountUpdateCache          = make(map[string]updateCache)
	productDiscountUpsertCacheMut       sync.RWMutex
	productDiscountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productDiscountBeforeInsertHooks []ProductDiscountHook
var productDiscountBeforeUpdateHooks []ProductDiscountHook
var productDiscountBeforeDeleteHooks []ProductDiscountHook
var productDiscountBeforeUpsertHooks []ProductDiscountHook

var productDiscountAfterInsertHooks []ProductDiscountHook
var productDiscountAfterSelectHooks []ProductDiscountHook
var productDiscountAfterUpdateHooks []ProductDiscountHook
var productDiscountAfterDeleteHooks []ProductDiscountHook
var productDiscountAfterUpsertHooks []ProductDiscountHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductDiscount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductDiscount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductDiscount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductDiscount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductDiscount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductDiscount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductDiscount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductDiscount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductDiscount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductDiscountHook registers your hook function for all future operations.
func AddProductDiscountHook(hookPoint boil.HookPoint, productDiscountHook ProductDiscountHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		productDiscountBeforeInsertHooks = append(productDiscountBeforeInsertHooks, productDiscountHook)
	case boil.BeforeUpdateHook:
		productDiscountBeforeUpdateHooks = append(productDiscountBeforeUpdateHooks, productDiscountHook)
	case boil.BeforeDeleteHook:
		productDiscountBeforeDeleteHooks = append(productDiscountBeforeDeleteHooks, productDiscountHook)
	case boil.BeforeUpsertHook:
		productDiscountBeforeUpsertHooks = append(productDiscountBeforeUpsertHooks, productDiscountHook)
	case boil.AfterInsertHook:
		productDiscountAfterInsertHooks = append(productDiscountAfterInsertHooks, productDiscountHook)
	case boil.AfterSelectHook:
		productDiscountAfterSelectHooks = append(productDiscountAfterSelectHooks, productDiscountHook)
	case boil.AfterUpdateHook:
		productDiscountAfterUpdateHooks = append(productDiscountAfterUpdateHooks, productDiscountHook)
	case boil.AfterDeleteHook:
		productDiscountAfterDeleteHooks = append(productDiscountAfterDeleteHooks, productDiscountHook)
	case boil.AfterUpsertHook:
		productDiscountAfterUpsertHooks = append(productDiscountAfterUpsertHooks, productDiscountHook)
	}
}

// One returns a single productDiscount record from the query.
func (q productDiscountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductDiscount, error) {
	o := &ProductDiscount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for product_discounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductDiscount records from the query.
func (q productDiscountQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductDiscountSlice, error) {
	var o []*ProductDiscount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to ProductDiscount slice")
	}

	if len(productDiscountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductDiscount records in the query.
func (q productDiscountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count product_discounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productDiscountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if product_discounts exists")
	}

	return count > 0, nil
}

// ComboPackage pointed to by the foreign key.
func (o *ProductDiscount) ComboPackage(mods ...qm.QueryMod) productComboPackageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ComboPackageID),
	}

	queryMods = append(queryMods, mods...)

	query := ProductComboPackages(queryMods...)
	queries.SetFrom(query.Query, "\"product_combo_packages\"")

	return query
}

// Product pointed to by the foreign key.
func (o *ProductDiscount) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	return query
}

// LoadComboPackage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productDiscountL) LoadComboPackage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductDiscount interface{}, mods queries.Applicator) error {
	var slice []*ProductDiscount
	var object *ProductDiscount

	if singular {
		object = maybeProductDiscount.(*ProductDiscount)
	} else {
		slice = *maybeProductDiscount.(*[]*ProductDiscount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productDiscountR{}
		}
		if !queries.IsNil(object.ComboPackageID) {
			args = append(args, object.ComboPackageID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productDiscountR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ComboPackageID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ComboPackageID) {
				args = append(args, obj.ComboPackageID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_combo_packages`),
		qm.WhereIn(`product_combo_packages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductComboPackage")
	}

	var resultSlice []*ProductComboPackage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductComboPackage")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_combo_packages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_combo_packages")
	}

	if len(productDiscountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ComboPackage = foreign
		if foreign.R == nil {
			foreign.R = &productComboPackageR{}
		}
		foreign.R.ComboPackageProductDiscounts = append(foreign.R.ComboPackageProductDiscounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ComboPackageID, foreign.ID) {
				local.R.ComboPackage = foreign
				if foreign.R == nil {
					foreign.R = &productComboPackageR{}
				}
				foreign.R.ComboPackageProductDiscounts = append(foreign.R.ComboPackageProductDiscounts, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productDiscountL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductDiscount interface{}, mods queries.Applicator) error {
	var slice []*ProductDiscount
	var object *ProductDiscount

	if singular {
		object = maybeProductDiscount.(*ProductDiscount)
	} else {
		slice = *maybeProductDiscount.(*[]*ProductDiscount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productDiscountR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productDiscountR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productDiscountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductDiscounts = append(foreign.R.ProductDiscounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductDiscounts = append(foreign.R.ProductDiscounts, local)
				break
			}
		}
	}

	return nil
}

// SetComboPackage of the productDiscount to the related item.
// Sets o.R.ComboPackage to related.
// Adds o to related.R.ComboPackageProductDiscounts.
func (o *ProductDiscount) SetComboPackage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductComboPackage) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"combo_package_id"}),
		strmangle.WhereClause("\"", "\"", 2, productDiscountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ComboPackageID, related.ID)
	if o.R == nil {
		o.R = &productDiscountR{
			ComboPackage: related,
		}
	} else {
		o.R.ComboPackage = related
	}

	if related.R == nil {
		related.R = &productComboPackageR{
			ComboPackageProductDiscounts: ProductDiscountSlice{o},
		}
	} else {
		related.R.ComboPackageProductDiscounts = append(related.R.ComboPackageProductDiscounts, o)
	}

	return nil
}

// RemoveComboPackage relationship.
// Sets o.R.ComboPackage to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ProductDiscount) RemoveComboPackage(ctx context.Context, exec boil.ContextExecutor, related *ProductComboPackage) error {
	var err error

	queries.SetScanner(&o.ComboPackageID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("combo_package_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ComboPackage = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ComboPackageProductDiscounts {
		if queries.Equal(o.ComboPackageID, ri.ComboPackageID) {
			continue
		}

		ln := len(related.R.ComboPackageProductDiscounts)
		if ln > 1 && i < ln-1 {
			related.R.ComboPackageProductDiscounts[i] = related.R.ComboPackageProductDiscounts[ln-1]
		}
		related.R.ComboPackageProductDiscounts = related.R.ComboPackageProductDiscounts[:ln-1]
		break
	}
	return nil
}

// SetProduct of the productDiscount to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductDiscounts.
func (o *ProductDiscount) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productDiscountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &productDiscountR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductDiscounts: ProductDiscountSlice{o},
		}
	} else {
		related.R.ProductDiscounts = append(related.R.ProductDiscounts, o)
	}

	return nil
}

// ProductDiscounts retrieves all the records using an executor.
func ProductDiscounts(mods ...qm.QueryMod) productDiscountQuery {
	mods = append(mods, qm.From("\"product_discounts\""))
	return productDiscountQuery{NewQuery(mods...)}
}

// FindProductDiscount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductDiscount(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductDiscount, error) {
	productDiscountObj := &ProductDiscount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_discounts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productDiscountObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from product_discounts")
	}

	return productDiscountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductDiscount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no product_discounts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productDiscountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productDiscountInsertCacheMut.RLock()
	cache, cached := productDiscountInsertCache[key]
	productDiscountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productDiscountAllColumns,
			productDiscountColumnsWithDefault,
			productDiscountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productDiscountType, productDiscountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productDiscountType, productDiscountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_discounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_discounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into product_discounts")
	}

	if !cached {
		productDiscountInsertCacheMut.Lock()
		productDiscountInsertCache[key] = cache
		productDiscountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductDiscount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductDiscount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productDiscountUpdateCacheMut.RLock()
	cache, cached := productDiscountUpdateCache[key]
	productDiscountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productDiscountAllColumns,
			productDiscountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update product_discounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_discounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productDiscountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productDiscountType, productDiscountMapping, append(wl, productDiscountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update product_discounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for product_discounts")
	}

	if !cached {
		productDiscountUpdateCacheMut.Lock()
		productDiscountUpdateCache[key] = cache
		productDiscountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productDiscountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for product_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for product_discounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductDiscountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productDiscountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in productDiscount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all productDiscount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductDiscount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no product_discounts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productDiscountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productDiscountUpsertCacheMut.RLock()
	cache, cached := productDiscountUpsertCache[key]
	productDiscountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productDiscountAllColumns,
			productDiscountColumnsWithDefault,
			productDiscountColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productDiscountAllColumns,
			productDiscountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert product_discounts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productDiscountPrimaryKeyColumns))
			copy(conflict, productDiscountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_discounts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productDiscountType, productDiscountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productDiscountType, productDiscountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert product_discounts")
	}

	if !cached {
		productDiscountUpsertCacheMut.Lock()
		productDiscountUpsertCache[key] = cache
		productDiscountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductDiscount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductDiscount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no ProductDiscount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productDiscountPrimaryKeyMapping)
	sql := "DELETE FROM \"product_discounts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from product_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for product_discounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productDiscountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no productDiscountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from product_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for product_discounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductDiscountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productDiscountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_discounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productDiscountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from productDiscount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for product_discounts")
	}

	if len(productDiscountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductDiscount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductDiscount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductDiscountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductDiscountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_discounts\".* FROM \"product_discounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productDiscountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ProductDiscountSlice")
	}

	*o = slice

	return nil
}

// ProductDiscountExists checks if the ProductDiscount row exists.
func ProductDiscountExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_discounts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if product_discounts exists")
	}

	return exists, nil
}
